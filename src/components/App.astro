---
import '@/styles/app.css'
import PromptArea from '@/components/PromptArea.astro'
import ResultArea from '@/components/ResultArea.astro'
import AdMiddle from '@/components/AdMiddle.astro'
---

<section id='app'>
  <PromptArea />
  <div class='middle'>
    <!-- <AdMiddle /> -->
    <button id='converter' aria-label='Converter button'></button>
    <!-- <AdMiddle /> -->
  </div>
  <ResultArea />
</section>

<script>
  // FunciÃ³n auto-invocada para poder hacer 'return' en Astro
  ;(function () {
    const $ = (selector: string): Element | null =>
      document.querySelector(selector)

    const appInProduction = import.meta.env.PUBLIC_APP_IN_PRODUCTION
    const fetchURL =
      appInProduction === 'true'
        ? 'https://plt2img-bnd.onrender.com/get-plot'
        : 'http://127.0.0.1:5000/get-plot'
    const $btnConverter = $('#converter') as HTMLButtonElement
    const $promptInput = $('#prompt-input') as HTMLTextAreaElement
    const $image = $('#result-image') as HTMLImageElement
    const $fetchMsg = $('#fetchMsg') as HTMLParagraphElement

    if (!$btnConverter || !$promptInput || !$image || !$fetchMsg) return

    $btnConverter.addEventListener('click', () => {
      if ($fetchMsg.classList.contains('show')) $fetchMsg.click()

      $fetchMsg.classList.add('show')
      $fetchMsg.style.color = '#04AA6D'
      $fetchMsg.textContent = 'Wait, your content is charging'

      fetch(fetchURL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ python_code: $promptInput.value }),
      })
        .then((response) => {
          if (!response.ok) {
            return response.json().then((errorData) => {
              throw new Error(
                `${errorData.message} (${response.status})` ||
                  'Error desconocido'
              )
            })
          }

          $fetchMsg.classList.remove('show')
          $fetchMsg.textContent = 'Message space'

          return response.json()
        })
        .then((data) => {
          const imgBase64 = data.image_base64
          $image.src = `data:image/png;base64,${imgBase64}`
        })
        .catch((error) => {
          $fetchMsg.classList.add('show')
          if ($fetchMsg) {
            $fetchMsg.style.color = '#ff0000'
            $fetchMsg.textContent = 'Error: ' + error.message
          }
          $image.src = '/assets/error_image.webp'
        })
    })
  })()
</script>
